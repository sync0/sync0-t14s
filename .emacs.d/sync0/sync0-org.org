* org-id
#+BEGIN_SRC emacs-lisp
  (use-package org-id
    :straight nil
    :custom
(org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
:init
    (require 'find-lisp)
    :config
;; Update ID file on startup
(org-id-update-id-locations))
#+END_SRC 

* org-journal
  Although, I have been almost entirely paper-less since I started my
  Master's degree, I have struggled to implement a planning workflow
  (calendar, task list, etc.) that is both easy to maintain and easy to
  use. After all, the litmus test of an efficient and consistent
  planning workflow is daily use. The ~org-journal~ package contains a set
  of functions to maintain a personal diary, using ~org-mode~ and Emacs.
  For my daily planning needs, this is the package I currently use,
  alongside the proverbial ~org-agenda~ and Google calendar.

  Caveat: Unfortunately, I have been unable to coordinate my Emacs
  workflow with my mobile phone; therefore, I sometimes require ~Todoist~
  for things such as grocery shopping and recurring tasks. While you can
  do all this within ~org-mode~, and I have, I am not satisfied with the
  implementation so far. 

#+BEGIN_SRC emacs-lisp
  (use-package org-journal 
    :straight (org-journal :type git :host github :repo "bastibe/org-journal") 
    :custom
    ;; Set default directory to search for journal files. 
    ;;(org-journal-dir (concat sync0-dropbox-directory "org"))
    (org-journal-dir (concat sync0-dropbox-directory "org/journal"))
    ;; Delete the date prefix to new journal entries.
    (org-journal-time-format "")
    ;; Create one journal file per month. 
    ;; (org-journal-file-type 'daily)
    (org-journal-file-type 'monthly)
    ;; Change the title of journal files to the format: "YYYY_MM.gpg".
    (org-journal-file-format "%Y%m.org")
    ;; Change the format of journal entries (org headlines) to "[Day], DD/MM/YYYY".
    ;; (org-journal-date-format "%A, %Y/%m/%d")
    (org-journal-date-format "%A, %Y/%m/%d")
    ;; Encrypt journal files.
    (org-journal-encrypt-journal nil)
    ;; Don't encript individual entires in journal files. It's too cumbersome. 
    (org-journal-enable-encryption nil)
    (org-journal-carryover-items "TODO=\"無\"|TODO=\"次\"|TODO=\"中\"|TODO=\"待\"|TODO=\"阻\"")
    (org-journal-enable-agenda-integration nil)
    (org-journal-file-header "#+TITLE: %B, %Y\n#+FILETAGS: :journal:%Y:%B:\n\n")
    ;;(org-journal-file-header "#+TITLE: %A, %Y/%m/%d\n#+CREATED: %Y/%m/%d\n#+DATE: %Y/%m/%d\n#+ROAM_TAGS: journal %Y %B\n\n")

    :config

    (defun sync0-org-journal-new-scheduled-entry (prefix &optional scheduled-time)
      "Create a new entry in the future."
      (interactive "P")
      (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "%Y-%m-%d %a")))
            (raw (prefix-numeric-value prefix)))
        (org-journal-new-entry (= raw 16) (org-time-string-to-time scheduled-time))
        (unless (= raw 16)
          (if (not prefix)
              (insert "")))))

(defhydra sync0-hydra-org-journal (:color amaranth :hint nil :exit t)
  "
   ^Journaling functions^
   ^---------------
   _t_oday's note
   other date            
   previous note
   next note
                                                                     
   _q_uit
        "
  ("t" sync0-org-journal-new-scheduled-entry)
  ("p" org-roam-dailies-find-previous-note)
  ("n" org-roam-dailies-find-next-note)
  ("o" org-roam-dailies-find-date)
  ("q" nil :color blue))

(evil-leader/set-key
  "J" 'sync0-hydra-org-journal/body)

    :bind (("C-c j" . sync0-org-journal-new-scheduled-entry)
           :map org-journal-mode-map
           ("C-c C-s" . org-schedule)))
  #+END_SRC 

* org-agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda 
    :straight nil
    :after (org all-the-icons)
    ;;  :commands       (sync0-pop-to-org-agenda org-agenda)
    :custom
    (org-agenda-todo-keyword-format "%-1s ")
    (org-agenda-include-diary t)
    (org-agenda-inhibit-startup t)
    (org-agenda-dim-blocked-tasks nil)
    (org-cycle-separator-lines 0)
    ;; Choose the placement of org tags in org files.
    (org-tags-column 80)
    ;; Place org agenda tags in the same place as org tags.
    (org-agenda-tags-column 0)
    ;; Make org-agenda the only window by default.
    (org-agenda-window-setup 'only-window)
    (org-agenda-block-separator (string-to-char " "))
    ;; Build agenda manually (to update press "r").
    (org-agenda-sticky t)
    ;; Compact the block agenda view. This deletes the section separators.
    (org-agenda-compact-blocks nil)
    ;; Allow one-key todo selection.
    (org-use-fast-todo-selection t)
    ;; Include the todo keywords in fast tag selection buffer.
    (org-fast-tag-selection-include-todo t)
    ;; Allow one-key tag selection.
    (org-fast-tag-selection-single-key t)
    ;; each habit to show up when it is next scheduled, but no further repetitions
    (org-agenda-repeating-timestamp-show-all nil)
    ;; This variable may be set to nil, t, or a number which will then
    ;; give the number of days before the actual deadline when the
    ;; prewarnings should resume.
    ;; (org-agenda-skip-deadline-prewarning-if-scheduled 'post-deadline)
    (org-agenda-skip-scheduled-if-deadline-is-shown t)
    ;; (org-agenda-skip-scheduled-if-deadline-is-shown t)
    ;; Add appointments duration to column view's effort estimates.
    (org-agenda-columns-add-appointments-to-effort-sum t)
    (org-agenda-ignore-drawer-properties '(effort appt category))
    (org-agenda-deadline-leaders (quote ("今日" "%-1d日後" "%-1d日前")))
    (org-agenda-scheduled-leaders (quote ("今日" "以前")))

    :config

    (require 'cal-iso)
    (require 'sync0-org-agenda-functions)
    (require 'sync0-org-agenda)

    ;; workaround developed by some smart user to circumvent org-agenda's slow performance
    ;; (run-with-idle-timer 5 nil (lambda () (org-agenda-list) (delete-window)))

    :bind 
    (([f6] . sync0-pop-to-org-agenda)
     :map org-agenda-mode-map
     ("S" . org-agenda-schedule)
     ("D" . org-agenda-deadline)
     ("j" . org-agenda-next-item)
     ("k" . org-agenda-previous-item)
     ("J" . sync0-org-agenda-next-header)
     ("K" . sync0-org-agenda-previous-header)
     ("N" . sync0-org-agenda-new)))
#+END_SRC 

* org-emms
#+BEGIN_SRC emacs-lisp
(use-package emms)

(use-package org-emms
:after emms
:commands (org-emms-insert-track
           org-emms-insert-track-position))
#+END_SRC 

* org-fc 
#+BEGIN_SRC emacs-lisp
(use-package org-fc
:straight (org-fc :type git :host github :repo "l3kn/org-fc" :files (:defaults "awk" "demo.org" "contrib/*.el")) 
:commands (org-fc-hydra/body
           org-fc-review
           org-fc-review-all)
:custom
(org-fc-directories sync0-zettelkasten-directory)
:config
(require 'org-fc-hydra)

(defhydra sync0-hydra-org-fc-functions (:color amaranth :hint nil :exit t)
  "
   ^Flip^       ^Rate^       ^Create card^
   ^--------------------------------------
   _f_lip       _e_asy      _d_ouble (no back)
   _s_uspend    _g_ood      _n_ormal
   sto_p_       _h_ard      _t_ext input
   ^ ^          _a_gain     _c_loze
   _q_uit
        "

  ("f" org-fc-review-flip)
  ("s" org-fc-review-suspend-card)
  ("p" org-fc-review-quit)
  ("a" org-fc-review-rate-again)
  ("h" org-fc-review-rate-hard)
  ("g" org-fc-review-rate-good)
  ("e" org-fc-review-rate-easy)
  ("n" org-fc-type-normal-init)
  ("d" org-fc-type-double-init)
  ("t" org-fc-type-text-input-init)
  ("c" org-fc-type-cloze-init)
  ("q" nil :color blue))

(evil-leader/set-key-for-mode 'org-mode "t" 'sync0-hydra-org-fc-functions/body)

)

#+END_SRC 

* org-protocol
#+BEGIN_SRC emacs-lisp
(server-start)

(use-package org-protocol
:after org
:straight nil)
#+END_SRC 

* org-ref 
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :straight (org-ref :type git :host github :repo "jkitchin/org-ref") 
    :custom
    (reftex-default-bibliography '("~/Dropbox/bibliographies/bibliography.bib"
                                   "~/Dropbox/bibliographies/doctorat.bib"))
    (org-ref-default-bibliography reftex-default-bibliography)
    (org-ref-pdf-directory sync0-pdfs-folder)
    (org-ref-completion-library 'org-ref-ivy-cite)
    (org-ref-open-pdf-function 'sync0-org-ref-open-pdf-at-point)

    :config
   (require 'doi-utils)
   (require 'bibtex-completion)
   (require 'sync0-org-ref-functions)

(ivy-set-display-transformer
 'org-ref-ivy-insert-cite-link
 'ivy-bibtex-display-transformer)

(evil-leader/set-key
  "R" 'sync0-hydra-research-functions/body)

    :bind 
    (:map org-mode-map
          ("C-c [" . org-ref-ivy-insert-cite-link)
          ;; ("C-c 9"  . org-ref-notes-function)
          ("<f9>" . sync0-hydra-research-functions/body)
          :map bibtex-mode-map
          ("C-c 9"  . ivy-bibtex)
          ("<f9>" . sync0-hydra-research-functions/body)
          ("C-c 8"  . sync0-org-ref-open-pdf-at-point)))
#+END_SRC 

* org-roam
#+BEGIN_SRC emacs-lisp

(use-package org-roam
  :after evil-leader
  :straight (org-roam :type git :host github :repo "org-roam/org-roam") 
  :init 
  (require 'org-id)
  :custom
  (org-roam-directory "~/Dropbox/org/")
  (org-id-extra-files (find-lisp-find-files org-roam-directory "\.org$"))
  (org-roam-file-extensions '("org"))
;; disable warning
  (org-roam-v2-ack t) 
;; exclude useless files from my org directory 
  (org-roam-file-exclude-regexp "etc/[[:graph:]]+.org")
  :config
  (org-roam-setup)
  (require 'org-ref)
  (require 'sync0-org-roam-functions)

  ;; add the possiblity to follow links in the org-roam buffer
  (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing)

  (evil-leader/set-key
    "F" 'org-roam-node-find
    "B" 'org-roam-buffer-toggle
    "i" 'sync0-org-roam-insert
    "I" 'sync0-hydra-org-roam-insert/body))
#+END_SRC 

** company-org-roam
 #+BEGIN_SRC emacs-lisp
    (use-package company-org-roam
    :disabled t
    :after company)
    #+END_SRC 

** 見 org-roam-bibtex
   #+BEGIN_SRC emacs-lisp
    (use-package org-roam-bibtex
      :straight (org-roam-bibtex :type git :host github :repo "org-roam/org-roam-bibtex") 
      :after (org-roam)
      :hook (org-roam-mode . org-roam-bibtex-mode)
      :custom
          ;; Use this to insert org-ref citations (cite:XXX199X)
          (orb-autokey-format "%a%y")
          (orb-process-file-keyword t)
          (orb-file-field-extensions '("pdf" "epub"))
          ;; Use this to insert citation keys
          (orb-insert-link-description 'citekey)
          (orb-insert-interface 'ivy-bibtex)
          (orb-note-actions-interface 'hydra)
      :config

    (setq orb-preformat-keywords
          '("citekey" "title" "subtitle" "booktitle" "booksubtitle" "journaltitle" "url" "author-or-editor" "keywords" "file"))

      (setq orb-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
               :file-name "~/Dropbox/org/reference/${citekey}"
               :head "#+TITLE: ${title}\n#+SUBTITLE: ${subtitle}\n#+AUTHOR: ${author-or-editor}\n#+JOURNAL_TITLE: ${journaltitle}\n#+BOOK_TITLE: ${booktitle}\n#+BOOK_SUBTITLE: ${booksubtitle}\n#+ROAM_KEY: cite:${citekey}\n#+CREATED: %<%Y/%m/%d>\n#+DATE: %<%Y/%m/%d>\n#+ROAM_TAGS: ${citekey} \"${author-or-editor}\"\n#+INTERLEAVE_PDF: ${file}"
               :unnarrowed t))))
#+END_SRC 

* org-pdftools 
  #+BEGIN_SRC emacs-lisp
     (use-package org-pdftools
     :disabled t
      :straight nil
      :config (org-pdftools-setup-link))
  #+END_SRC 

* org-crypt
  Allow encryption of org trees and sub trees. 

  #+BEGIN_SRC emacs-lisp
  (use-package org-crypt 
    :straight nil
    :after org
    :custom
    (org-crypt-key "carc.sync0@gmail.com")
    :config
    (org-crypt-use-before-save-magic))
  #+END_SRC 

* org-capture
#+BEGIN_SRC emacs-lisp
(use-package org-capture 
  :straight nil
  :after (org evil-leader)
  :preface 
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))
  :custom
  (org-default-notes-file "~/Dropbox/etc/notes.org")
  :config 
  (require 'org-ref)
  (require 'sync0-org-capture-functions)

  (evil-leader/set-key "c" 'org-capture)

  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (setq org-capture-templates 
        '(("j" "Journal" entry (function org-journal-find-location)
           "* %(format-time-string org-journal-time-format)\n\n%?"
           ;; "* %(format-time-string org-journal-time-format)\n\n%?"
           :jump-to-captured t :immediate-finish t)
          ("f" "Fiche" plain 
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-zettel-body)
           :unnarrowed t)
          ("p" "Note de projet" plain 
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-zettel-body)
           :unnarrowed t)
          ("t" "Liste de tâches" plain
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-zettel-body)
           :unnarrowed t)
          ("a" "Annotation" plain 
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-zettel-body)
           :unnarrowed t)
          ("r" "Référence" plain 
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-reference)
           :unnarrowed t)
          ("w" "Référence web" plain 
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-reference)
           :unnarrowed t)
          ("z" "Zettel" plain 
           (file sync0-org-capture-zettel-path)
           (function sync0-org-capture-zettel-body)
           :unnarrowed t)
          ;;    ("c" "Correspondant (messages)" plain 
          ;; (file sync0-org-capture-message-name)
          ;;   "%(format \"#+TITLE: Messages pour %s\n#+CREATED: %s\n#+DATE: \n#+ROAM_TAGS: fiches %s\" sync0-zettel-title-upcase sync0-zettel-time-ordered sync0-zettel-title)\n\nOrigin: [[file:%(sync0-org-get-abbreviated-path (org-capture-get :original-file))][%(sync0-org-get-file-title-keyword (org-capture-get :original-file))]]\n\n"
          ;;   :unnarrowed t :jump-to-captured t)
          ("m" "Email" entry 
           (file+headline "~/Dropbox/org/message/messages.org" "À répondre")
           ;; "** 無 %^{Description}\n%A\n%?\n"
           "** 無 %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%A\n" :jump-to-captured t :prepend t)))

  :bind 
  (("\C-c c" . org-capture)))
#+END_SRC 
* org-protocol-capture-html
  #+BEGIN_SRC emacs-lisp
    (use-package org-protocol-capture-html
      :straight (org-protocol-capture-html :type git :host github :repo "alphapapa/org-protocol-capture-html") 
      :after (org-protocol s))
  #+END_SRC 
* org-habits
  This package is included in ~org-mode~; it simply allows the creation of
  recurring tasks for use in ~org-agenda~. Although this introduces some
  interesting functionality for tracking your habits, I found that I
  didn't  use it consistently. I keep the configuration just in case I
  change my mind someday.

  Beware! There is a strange inconsistency when habits are enabled. See [[https://emacs.stackexchange.com/questions/26291/not-allowed-in-tags-type-agenda-using-custom-agenda]]

  #+BEGIN_SRC emacs-lisp
  (use-package org-habit 
    :straight nil
    :after (org org-agenda)
    ;; :commands org-bullets-mode
    :config
    (setq org-habit-graph-column 80
          org-habit-show-habits-only-for-today nil))
  #+END_SRC 

  This allow to hide certain tags in the agenda display, but include them in
  the processing of agenda commands
  #+BEGIN_SRC emacs-lisp
  (setq
  org-agenda-hide-tags-regexp "projects\\|research\\|project\\|important\\|short_term\\|long_term\\|no_export\\|this_month\\|this_week\\|next_week\\|next_moth\\|todo\\|etc\\|doctorat\\|menage")
  #+END_SRC 
  
* org-clock
  #+BEGIN_SRC emacs-lisp
    (use-package org-clock 
        :straight nil
        :after org
        :custom
        ;; Set default column view headings: Task Priority Effort Clock_Summary
        (org-columns-default-format "%1PRIORITY %2TODO %DEADLINE %60ITEM(Task) %5EFFORT(Effort){:} %5CLOCKSUM")
        (org-agenda-clockreport-parameter-plist
         '(:link t :maxlevel 6 :fileskip0 t :compact t :narrow 60 :score 0))
        ;; Agenda clock report parameters
        ;; global Effort estimate values
        ;;        1    2    3    4    5    6    7    8    9    0
        ;; These are the hotkeys ^
        (org-global-properties  '(("Effort_ALL" . "1:00 2:00 4:00 5:00 8:00 10:00 12:00 15:00 20:00 24:00")))
        ;; If idle for more than 15 minutes, resolve the things by asking what to do
        ;; with the clock time
        (org-clock-idle-time 5)
        ;; Show lot of clocking history so it's easy to pick items off the `C-c I` list
        (org-clock-history-length 23)
        ;; Save the running clock and all clock history when exiting Emacs, load it on startup
        (org-clock-persist 'history)
        ;; org-clock-persist t
        ;; Resume clocking task on clock-in if the clock is open
        (org-clock-in-resume t)
        ;; Do not prompt to resume an active clock, just resume it
        (org-clock-persist-query-resume nil)
        ;; Change tasks to whatever when clocking in
        (org-clock-in-switch-to-state "中")
        ;; Save clock data and state changes and notes in the LOGBOOK drawer
        (org-clock-into-drawer t)
        ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
        ;; with 0:00 duration
        (org-clock-out-remove-zero-time-clocks t)
        ;; Clock out when moving task to a done state
        (org-clock-out-when-done t)
        ;; Enable auto clock resolution for finding open clocks
        (org-clock-auto-clock-resolution (quote when-no-clock-is-running))
        ;; Include current clocking task in clock reports
        (org-clock-report-include-clocking-task t)
        ;; use pretty things for the clocktable
        (org-pretty-entities t)
        (org-clock-string-limit 8)

        :config
          ;; Avoid annoying space in mode line when no clock is defined.
          (add-hook 'org-clock-out-hook
                    '(lambda ()
                       (setq org-mode-line-string nil)))

        (defun sync0-org-clock-in ()
          (interactive)
          (org-clock-in '(4)))

        ;; This function was taken from Sacha Chua's configuration.
        ;; Display words typed and minutes spent in an org subtree.
        (defun sync0-org-entry-word-count ()
          (interactive)
          (save-restriction
            (save-excursion
              (org-narrow-to-subtree)
              (goto-char (point-min))
              (let* ((words (count-words-region (point-min) (point-max)))
                     (minutes (org-clock-sum-current-item))
                     (wpm (/ words minutes)))
                (message "WPM: %d (words: %d, minutes: %d)" wpm words minutes)
                (kill-new (number-to-string wpm))))))

        ;; Resume clocking task when emacs is restarted
        (org-clock-persistence-insinuate)

     (defhydra sync0-hydra-org-clock (:color blue :hint nil)
"
^Clock functions^   
^--------------------
^In/out^    ^Edit^    ^Summary (_?_)
^----------------------------------------- 
_i_n        _e_dit    _g_oto entry 
_c_ontinue  _Q_uit    _d_isplay 
_o_ut       ^ ^       _r_eport 
            ^ ^       _w_ord count

_q_uit
"
       ("i" sync0-org-clock-in)
       ("c" org-clock-in-last)
       ("o" org-clock-out)
       ("e" org-clock-modify-effort-estimate)
       ("Q" org-clock-cancel)
       ("g" org-clock-goto)
       ("d" org-clock-display)
       ("r" org-clock-report)
       ("w" sync0-org-entry-word-count)
       ("?" (org-info "Clocking commands"))
       ("q" nil :color blue))

    (evil-leader/set-key
      "T" 'sync0-hydra-org-clock/body))
  #+END_SRC 

* ox-latex
  Even though, by default, Emacs Org mode has the export keyword
  ~LATEX_COMPILER:~ to choose among the different engines (pdflatex, xelatex, or
  lualatex), I had to tweek the settings to run LaTeX through ~latexmk~ for
  biber to work properly with BibLaTeX. In layman English, the following
  configuration is necessary for automatic bibliography management to work
  properly when exporting org documents to LaTeX.

  BTW, you can assign "pdf" in above variables if you prefer PDF format
  for page breaks add this to org files
  # #+ODT: <text:p text:style-name="PageBreak"/>

  #+BEGIN_SRC emacs-lisp
  (use-package ox-latex 
    :straight nil
    :after org
    :custom
    ;; Set latex compiler for org export. 
    (org-latex-compiler "lualatex")
    ;; Set latex bibtex compiler for org export. 
    (org-latex-bibtex-compiler "lualatex")
    ;; Export references (to tables, graphics, etc.) properly, evaluating the +NAME property. 
    (org-latex-prefer-user-labels t)
    ;; (org-latex-pdf-process (list "latexmk -lualatex -bibtex -f %f"))
    ;; export process is sent to the background
    (org-latex-listings 'minted)
    ;; set word wrap for code blocks
    (org-latex-minted-options '(("breaklines" "true")
                                ("breakanywhere" "true")))
    ;;  (org-latex-pdf-process (list "latexmk -lualatex -bibtex-cond -f %f")
    ;; (org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl"))
    (org-export-in-background t)
    ;; select tasks (i.e., TODOs) for export
    (org-export-with-tasks '("來" "完" "未" "中" "待" "見"))
    (org-export-date-timestamp-format "%Y/%m/%d")
    ;; Export to Microsoft Word (doc).
    (org-export-odt-preferred-output-format "doc")
    (org-odt-preferred-output-format "doc")
    (org-latex-logfiles-extensions '("aux" "lof" "lot" "tex~" "idx" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "run.xml"))

    :config
(defun sync0-org-export-latex-and-beamer ()
  "Export current org file with beamer if it has beamer as latex class."
  (interactive)
  (cond ((equal major-mode 'org-mode) 
         (if (string-match "^\\#\\+SETUPFILE: .*beamer\\.org.*" (buffer-string))
             (progn
               (setq org-latex-pdf-process '("latexmk -xelatex -bibtex -output-directory=%o -f %f"))
               (org-beamer-export-to-pdf))
           (progn
             (setq org-latex-pdf-process '("latexmk -lualatex -bibtex -output-directory=%o -f %f"))
             (org-latex-export-to-pdf))))
        ((or (equal major-mode 'tex-mode) 
             (equal major-mode 'latex-mode)) 
         (tex-compile))
        (t  (message "Impossible de produire un pdf à partir de ce fichier"))))

;; export headlines to separate files
;; http://emacs.stackexchange.com/questions/2259/how-to-export-top-level-headings-of-org-mode-buffer-to-separate-files

(defun sync0-org-export-headlines-to-latex ()
  "Export all subtrees that are *not* tagged with :noexport: to
separate files.

Subtrees that do not have the :EXPORT_FILE_NAME: property set
are exported to a filename derived from the headline text."
  (interactive)
  (save-buffer)
  (let ((modifiedp (buffer-modified-p)))
    (save-excursion
      (goto-char (point-min))
      (goto-char (re-search-forward "^*"))
      (set-mark (line-beginning-position))
      (goto-char (point-max))
      (org-map-entries
       (lambda ()
         (let ((export-file (org-entry-get (point) "EXPORT_FILE_NAME")))
           (unless export-file
             (org-set-property
              "EXPORT_FILE_NAME"
              (replace-regexp-in-string " " "_" (nth 4 (org-heading-components)))))
           (deactivate-mark)
           (org-latex-export-to-latex nil t)
           (unless export-file (org-delete-property "EXPORT_FILE_NAME"))
           (set-buffer-modified-p modifiedp)))
       "-noexport" 'region-start-level))))

    ;; ;; Set tags to excluce from export. 
    (add-to-list 'org-export-exclude-tags "消")
    (add-to-list 'org-export-exclude-tags "noexport")

    ;; To use KOMA-Script classes in LaTeX documents created through Org mode
    ;; export, it is necessary to explicitely add them to ~org-latex-classes~.
    ;; Moreover, this method can be used to create custom LaTeX classes.
    (add-to-list 'org-latex-classes '("scrartcl"
                                      "\\documentclass{scrartcl}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrartcl-subsection"
                                      "\\documentclass{scrartcl}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrartcl-section"
                                      "\\documentclass{scrartcl}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrreprt"
                                      "\\documentclass{scrreprt}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrbook"
                                      "\\documentclass{scrbook}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\part{%s}" . "\\part*{%s}")
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrbook-chapter"
                                      "\\documentclass{scrbook}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrbook-section"
                                      "\\documentclass{scrbook}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("scrbook-subsection"
                                      "\\documentclass{scrbook}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("article"
                                      "\\documentclass{article}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("book"
                                      "\\documentclass{book}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("report"
                                      "\\documentclass{report}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble.tex}
                                        [EXTRA]"
                                      ("\\chapter{%s}" . "\\chapter*{%s}")
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("beamer"
                                      "\\documentclass{beamer}
                                        [NO-DEFAULT-PACKAGES]
  \\input{/home/sync0/Dropbox/typography/latex_preamble-beamer.tex}
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

(evil-leader/set-key
  "X" 'sync0-org-export-latex-and-beamer)

    :bind 
    (:map org-mode-map 
          ("M-p" . sync0-org-export-latex-and-beamer)))
  #+END_SRC 

* org-bullets
  While this is an amazing package, it terribly slows down org-mode
  on my laptop when editing large ~org~ files or files with many
  ~PROPERTY~ drawers .

  #+BEGIN_SRC emacs-lisp
      (use-package org-bullets 
        :straight (org-bullets :type git :host github :repo "sabof/org-bullets") 
        :custom
        ;; Hide all bullets:
        (org-bullets-bullet-list '(" ")))

  #+END_SRC 

* org-mu4e
  This package stores org mode links to messages.
  #+BEGIN_SRC emacs-lisp
  (use-package org-mu4e 
    :disabled t
    :after mu4e
    :straight nil
    :custom
    ;; Store link to message if in header view, not to header query.
    (org-mu4e-link-query-in-headers-mode nil))
  #+END_SRC 

* org-noter
#+BEGIN_SRC emacs-lisp
    (use-package nov
    :straight nil
    :after (org-noter evil)
    :load-path "~/.emacs.d/sync0/nov.el" 
    :config
      (push '("\\.epub\\'" . nov-mode) auto-mode-alist)

       (evil-define-key 'normal nov-mode-map
    "r" 'nov-render-document
   ;; "S" 'nov-view-content-source
    ;; "g?" 'nov-display-metadata
    "J" 'nov-next-document
    "K" 'nov-previous-document
    "T" 'nov-goto-toc
    "i" 'org-noter-insert-note
    "I" 'org-noter-insert-precise-note
      )

   (defun sync0-nov-font-setup ()
      (if (> (display-pixel-width) 1900)
      ;; high resolution (t14s)
    (progn
      (face-remap-add-relative 'variable-pitch
                               :family "Minion Pro"
                               ;; :height 200
                               :height 200)

        (nov-text-width 66)
        (nov-render-document))
      ;; low resolution 
    (progn
      (face-remap-add-relative 'variable-pitch
                               :family "Minion Pro"
                               ;; :height 200
                               ;; :height 155
                               :height 130)
        (nov-text-width 60)
        (nov-render-document))))

    (add-hook 'nov-mode-hook 'sync0-nov-font-setup))

    (use-package esxml
    :straight (esxml :type git :host github :repo "tali713/esxml"))

    (use-package org-noter
      :straight (org-noter :type git :host github :repo "weirdNox/org-noter") 
      :after (:any org pdf-view)
      :config
      (setq
       ;; The WM can handle splits
       org-noter-notes-window-location 'horizontal-split
       ;; Please stop opening frames
       org-noter-always-create-frame nil
       ;; I want to see the whole file
       org-noter-hide-other nil
       ;; Use interleave properties 
       org-noter-property-doc-file "INTERLEAVE_PDF"
       ;; 
       org-noter-default-heading-title (format-time-string "%Y%m%d%H%M%S")
       ;; Everything is relative to the main notes file
       org-noter-notes-search-path (list sync0-zettelkasten-directory)))
#+END_SRC 
  
* org-download
#+BEGIN_SRC emacs-lisp
(use-package org-download
:straight (org-download :type git :host github :repo "abo-abo/org-download") 
:after org
:hook (dired-mode . org-download-enable)
:custom
(org-download-image-dir "~/Pictures/org")
(org-download-screenshot-method "spectacle")
;; (org-download-screenshot-method "xfce4-screenshooter")

:config
    (defhydra sync0-hydra-org-download-functions (:color amaranth :hint nil :exit t)
      "
   ^Download functions^   
   ^--------------------
   _c_lipboard
   _y_ank
   _s_creenshot
                                                                     
   _q_uit
        "
      ("c" org-download-clipboard)
      ("y" org-download-yank)
      ("s" org-download-screenshot)
      ("q" nil :color blue))
 
(evil-leader/set-key
  "d" 'sync0-hydra-org-download-functions/body))
#+END_SRC 

* org 
#+BEGIN_SRC emacs-lisp
        (use-package org 
          :after evil
          :custom
          (org-hide-leading-stars t)
          ;; Leave one line between headlines 
          (org-cycle-separator-lines 1)
          ;; Don't fontify the whole damn line
          (org-fontify-whole-block-delimiter-line t)
          ;; Disable word wrap in org mode.
          ;; (org-startup-truncated t)
          ;; Initial indentation
          (org-startup-indented nil)         
          ;; Necessary to avoid crazy inconsistenscies using org-download and org-roam
          (org-link-file-path-type 'absolute)
          ;; Begin displaying entire trees.
          (org-startup-folded nil)
          ;; Better display of italics & bold.
          (org-hide-emphasis-markers t)
          ;; Define org-tags.
          (org-tag-alist '(("projects" . ?p)
                           ;; ("noexport" . ?n)
                           ("readings" . ?r)
                           ;; ("reviews" . ?r)
                           ("exams" . ?e)
                           ("urgent" . ?u)
                           ("this_week" . ?t)
                           ("this_month" . ?m)
                           ("next_week" . ?n)
                           ("short_term" . ?s)
                           ("long_term" . ?l)
                           ;; ("university" . ?u)
                           ("important" . ?i)))
          ;; Hide inherited tags from Org's agenda view.
          ;; org-agenda-show-inherited-tags nil
          ;; Define todo keywords.
          (org-todo-keywords '((sequence "未(1)" "來(2)" "中(3)" "見(4)" "待(5)" "|" "完(6)" "消(7)")))
          ;; Set faces for org-todo-keywords
          (org-todo-keyword-faces '(("未" . (:foreground "#dc322f" :weight semi-bold :height 0.9))
                                    ("來" . (:foreground "#d33682" :weight semi-bold :height 0.9))
                                    ("完" . (:foreground "#859900" :weight semi-bold :height 0.9))   
                                    ("待" . (:foreground "#268bd2" :weight semi-bold :height 0.9))
                                    ("消" . (:foreground "#6c71c4" :weight semi-bold :height 0.9)) 
                                    ("見" . (:foreground "#268bd2" :weight semi-bold :height 0.9)) 
                                    ("中" . (:foreground "#b58900" :weight semi-bold :height 0.9))))
          (org-blank-before-new-entry '((heading . nil)(plain-list-item . nil)))
          ;; Stop emacs asking for confirmation
          (org-confirm-babel-evaluate nil)
          (org-ellipsis "  ⌄ ") ;; folding symbol
          ;; Do not show export buffer.
          (org-export-show-temporary-export-buffer nil)
          ;; Set path for org default directory (necessary for refile and agenda).
          (org-directory (concat (getenv "HOME") "/Dropbox/org"))
          (org-refile-use-outline-path 'file)
          (org-outline-path-complete-in-steps nil)
          (org-startup-with-inline-images t)
          (org-refile-use-cache nil)
          ;; Have org-mode indent elisp sections.
          (org-src-tab-acts-natively nil)
          ;; Color embeded source code
          (org-src-fontify-natively t)
          (org-fontify-done-headline t) 
          (org-fontify-whole-heading-line t)
          (org-fontify-quote-and-verse-blocks t)
          ;; Don't fontify sub and superscripts.
          (org-pretty-entities-include-sub-superscripts nil)
          ;; Limit inheritance for certain tags. 
          (org-tags-exclude-from-inheritance (quote ("crypt" "ignore")))

          :config 

          ;; (require 'org-pdftools)
          (require 'org-journal)
          (require 'org-download)
          (require 'org-ref)
          ;; Free this keybinding for cycle-themes
          (unbind-key "C-c C-t" org-mode-map)
          (unbind-key "M-h" org-mode-map)

;; taken from https://stackoverflow.com/questions/8881649/how-to-force-org-mode-to-open-a-link-in-another-frame
  (defun sync0-org-open-other-frame ()
    "Jump to bookmark in another frame. See `bookmark-jump' for more."
    (interactive)
    (let ((org-link-frame-setup (acons 'file 'find-file-other-window
    org-link-frame-setup)))
      (org-open-at-point)))

      (defun sync0-overview-tree-window ()
        "Open a clone of the current buffer to the left, resize it to 30 columns, and bind <mouse-1> to jump to the same position in the base buffer."
        (interactive)
        (let ((new-buffer-name (concat "<tree>" (buffer-name))))
          ;; Create tree buffer
          (split-window-right 30)
          (if (get-buffer new-buffer-name)
              (switch-to-buffer new-buffer-name)  ; Use existing tree buffer
            ;; Make new tree buffer
            (progn  (clone-indirect-buffer new-buffer-name nil t)
                    (switch-to-buffer new-buffer-name)
                    (read-only-mode)
                    (hide-body)
                    (toggle-truncate-lines)

                    ;; Do this twice in case the point is in a hidden line
                    (dotimes (_ 2 (forward-line 0)))

                    ;; Map keys
                    (use-local-map (copy-keymap outline-mode-map))
                    (local-set-key (kbd "q") 'delete-window)
                    (mapc (lambda (key) (local-set-key (kbd key) 'my/jump-to-point-and-show))
                          '("<mouse-1>" "RET"))))))

      (defun sync0-overview-jump-to-overview ()
        "Switch to a cloned buffer's base buffer and move point to the cursor position in the clone."
        (interactive)
        (let ((buf (buffer-base-buffer)))
          (unless buf
            (error "You need to be in a cloned buffer!"))
          (let ((pos (point))
                (win (car (get-buffer-window-list buf))))
            (if win
                (select-window win)
              (other-window 1)
              (switch-to-buffer buf))
            (goto-char pos)
            (when (invisible-p (point))
              (show-branches)))))

          (defun sync0-org-tree-to-indirect-buffer ()
            "Open headline in the next window as a separate tree."
            (interactive)
            (org-tree-to-indirect-buffer)
            (windmove-right))

      (defhydra sync0-hydra-org-functions (:color amaranth :hint nil :exit t)
        "
     ^Links^             ^Footnotes^          ^Trees^              ^Export^          ^Etc.^
     ^---------------------------------------------------------------------------------------------------
     Link _i_nsert       New _f_ootnote       Indirect _b_uffer    Latex _e_xport    Insert _d_rawer
     Link _s_tore        Footnote _a_ctions   Open _o_verview      Export _t_rees
     Last stored lin_k_  ^ ^                  Overview _j_ump 
                                                                     
     _q_uit
          "

        ("s" org-store-link)
        ("i" org-insert-link)
        ("k" org-insert-last-stored-link)
        ("f" org-footnote-new)
        ("a" org-footnote-action)
        ("b" sync0-org-tree-to-indirect-buffer)
        ("j" sync0-overview-jump-to-overview)
        ("o" sync0-overview-tree-window)
        ("e" sync0-org-export-latex-and-beamer)
        ("t" sync0-org-export-headlines-to-latex)
        ("d" org-insert-drawer)
        ("q" nil :color blue))

    (evil-leader/set-key
      "O" 'org-open-at-point
      "#" 'sync0-org-open-other-frame)
      ;; "O" 'sync0-overview-tree-window
      ;; "o" 'sync0-overview-jump-to-overview
      ;; "I" 'org-insert-link
      ;; "z" 'sync0-org-tree-to-indirect-buffer
      ;; "z" 'sync0-hydra-org-functions/body

  (evil-leader/set-key-for-mode 'org-mode "z" 'sync0-hydra-org-functions/body)

        (defhydra sync0-hydra-file-access (:color amaranth :hint nil :exit t)
          "
           ^Windows^                ^Buffers^             ^Search^
        ^^^^^^---------------------------------------------------------------
        _1_: Delete others       _w_: Write           _r_: Recent
        _2_: Split horizontally  _a_: Write as        _f_: Find
        _3_: Split vertically    _b_: Open           
        ^ ^                      _k_: Kill
        ^ ^                      
        ^^^^^^---------------------------------------------------------------
           ^Bookmarks^           ^Planning^ 
        ^^^^^^---------------------------------------------------------------
        _j_: Jump to bookmark    _h_: Today
        _g_: Bookmark o. window  
        _m_: Set bookmark        
        _l_: List bookmarks      _J_: org-journal
        ^ ^                      
        [q] Quit                 ^ ^
        "
          ("1" delete-other-windows)
          ("2" sync0-split-and-follow-horizontally)
          ("3" sync0-split-and-follow-vertically)
          ("b" ivy-switch-buffer)
          ;; Quickly save
          ("w" save-buffer)
          ("a" write-file)
          ;; Kill current buffer and window
          ("k" kill-buffer-and-window)
          ;; ("o" ivy-switch-buffer-other-window)
          ("r" counsel-recentf)
          ("f" counsel-find-file)
          ("m" bookmark-set)
          ("j" counsel-bookmark)
          ("g" bookmark-jump-other-window)
          ("l" bookmark-bmenu-list)
          ;; ("A" org-agenda)
          ("J" sync0-org-journal-new-scheduled-entry)
          ("h" sync0-pop-to-org-agenda)
          ("q" nil :color blue))

          ;; font lock keywords 
          ;; org footnotes should look like real footnotes
  (add-to-list 'font-lock-extra-managed-props 'display)
  (font-lock-add-keywords 'org-mode
   '(("\\(\\[fn:\\)[[:digit:]]+\\]" 1 '(face nil display ""))))
  (font-lock-add-keywords 'org-mode
   '(("\\[fn:[[:digit:]]+\\(\\]\\)" 1 '(face nil display ""))))

  (require 'cl-lib)

  ;; Taken from https://emacs.stackexchange.com/questions/13514/how-to-obtain-the-statistic-of-the-the-frequency-of-words-in-a-buffer
  (defvar sync0-punctuation-marks '(","
                              "."
                              "'"
                              "&"
                              "\"")
    "List of Punctuation Marks that you want to count.")

  (defun sync0-count-raw-word-list (raw-word-list)
    (cl-loop with result = nil
             for elt in raw-word-list
             do (cl-incf (cdr (or (assoc elt result)
                               (first (push (cons elt 0) result)))))
             finally return (sort result
                                  (lambda (a b) (string< (car a) (car b))))))

  (defun sync0-word-stats ()
    (interactive)
    (let* ((words (split-string
                   (downcase (buffer-string))
                   (format "[ %s\f\t\n\r\v]+"
                           (mapconcat #'identity sync0-punctuation-marks ""))
                   t))
           (punctuation-marks (cl-remove-if-not
                               (lambda (elt) (member elt sync0-punctuation-marks))
                               (split-string (buffer-string) "" t )))
           (raw-word-list (append punctuation-marks words))
           (word-list (sync0-count-raw-word-list raw-word-list)))
      (with-current-buffer (get-buffer-create "*word-statistics*")
        (erase-buffer)
        (insert "| word | occurences |
                 |-----------+------------|\n")

        (dolist (elt word-list)
          (insert (format "| '%s' | %d |\n" (car elt) (cdr elt))))

        (org-mode)
        (indent-region (point-min) (point-max))
        (goto-char 100)
        (org-cycle)
        (goto-char 79)
        (org-table-sort-lines nil ?N)))
    (pop-to-buffer "*word-statistics*"))

          (defun sync0-call-rebinding-org-blank-behaviour (fn)
            (let ((org-blank-before-new-entry
                   (copy-tree org-blank-before-new-entry)))
              (when (org-at-heading-p)
                (rplacd (assoc 'heading org-blank-before-new-entry) nil))
              (call-interactively fn)))

          (defun sync0-org-meta-return-dwim ()
            "Improved version of default org-meta-return"
            (interactive)
            (sync0-call-rebinding-org-blank-behaviour 'org-meta-return))

          (defun sync0-org-insert-todo-heading-dwim ()
            "Improved version of org-insert-todo-heading"
            (interactive)
            (sync0-call-rebinding-org-blank-behaviour 'org-insert-todo-heading))

          (defun sync0-clever-insert-item ()
            "Clever insertion of org item."
            (if (not (org-in-item-p))
                (insert "\n")
              (org-insert-item)))

          (defun sync0-evil-org-eol-call (fun)
            "Go to end of line and call provided function. FUN function callback"
            (end-of-line)
            (funcall fun)
            (evil-append nil))

          ;; redefinition evils normal mode map
          (evil-define-key 'normal org-mode-map
            "<" 'outline-previous-visible-heading
            ">" 'outline-next-visible-heading
            (kbd "C->") 'org-forward-heading-same-level
            (kbd "C-<") 'org-backward-heading-same-level
            (kbd "<S-tab>") 'sync0-org-tree-open-in-right-frame 
            "H" 'org-metaleft
            "L" 'org-metaright
            "K" 'org-metaup
            "J" 'org-metadown
            "k" 'previous-line
            "j" 'next-line
            "o" '(lambda () (interactive) (sync0-evil-org-eol-call 'sync0-clever-insert-item))
            "O" '(lambda () (interactive) (sync0-evil-org-eol-call 'org-insert-heading))
            "$" 'org-end-of-line
            "^" 'org-beginning-of-line
            "[" 'backward-sentence
            "]" 'forward-sentence
            "{" 'org-backward-paragraph
            "}" 'org-forward-paragraph
            "-" 'org-cycle-list-bullet
            (kbd "<tab>") 'org-cycle)

          (evil-define-key 'visual org-mode-map
            ;; "q" 'highlight-changes-remove-highlight
            "z" 'org-emphasize)

          ;; List of files considered for org-refile.
          (setq org-refile-targets (quote ((nil :maxlevel . 4)                ;; Default value.
                                                ;; set for all agenda files
                                           ;; ("todo.org" :maxlevel . 2)
                                            (org-agenda-files :maxlevel . 4))))

          ;; (org-refile-targets '((org-agenda-files :maxlevel . 4)))

  (setq org-file-apps
  '((auto-mode . emacs)
   (directory . emacs)
   ("\\.mm\\'" . default)
   ("\\.x?html?\\'" . default)
   ("\\.pdf\\'" . emacs)))

          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

          ;; (setq org-src-block-faces    '(("emacs-lisp" (:family "Fira Code"  :height 0.75))
          ;;                                ("python" (:family "Fira Code"  :height 0.75))
          ;;                                ("latex" (:family "Fira Code"  :height 0.75))))

          :bind (;;("<f5>" . sync0-hydra-file-access/body)
                 ("C-x 2" . sync0-split-and-follow-horizontally)
                 ("C-x 3" . sync0-split-and-follow-vertically)
                 (:map org-mode-map
                  ("M-<return>" . sync0-org-meta-return-dwim)
                  ("M-S-<return>" . sync0-org-insert-todo-heading-dwim))))
      #+END_SRC 
      
* org-gcal
This package synchronizes org-mode and Google calendar. This is
useful to have Google calendar events displayed in org-mode agenda
buffers. 

#+BEGIN_SRC emacs-lisp
  (use-package org-gcal 
:straight (org-gcal :type git :host github :repo "kidd/org-gcal.el") 
    :after (org simple-secrets)
    :commands (org-gcal-fetch org-gcal-sync)
    :custom (org-gcal-auto-archive nil)
    :config
    (let* ((username (secret-lookup "sync0-gcal-client-id"))
           (password (secret-lookup "sync0-gcal-client-secret")))
      (setq org-gcal-client-id username)
      (setq org-gcal-client-secret password))

    ;; After learning how to use loops (cl-loop?), this function can
    ;; be rewritten in a much more concise way.
    (defun sync0-org-gcal-erase-buffers ()
     (interactive)
      "Erase buffers of calendar files"
      (let ((delete-classes (find-file-noselect "~/Dropbox/org/etc/Classes.org"))
            (delete-events (find-file-noselect "~/Dropbox/org/etc/Events.org"))
            (delete-gcal (find-file-noselect "~/Dropbox/org/etc/Gcal.org"))
            (delete-habits (find-file-noselect "~/Dropbox/org/etc/Habits.org")))
        (progn 
          (with-current-buffer delete-classes
            (erase-buffer))
          (with-current-buffer delete-events
            (erase-buffer))
          (with-current-buffer delete-gcal
            (erase-buffer))
          (with-current-buffer delete-habits
            (erase-buffer)))))

    (setq org-gcal-file-alist '(("carc.sync0@gmail.com" .  "~/Dropbox/org/etc/Gcal.org")
                                ("5iudo90h5e3nabbubvsj1lov4o@group.calendar.google.com" . "~/Dropbox/org/etc/Classes.org")
                                ("p9vu3a782nahsma6ud1rdg1qpc@group.calendar.google.com" . "~/Dropbox/org/etc/Events.org")
                                ("vbnn8eksqpqun2mbtdlknhh9uk@group.calendar.google.com" . "~/Dropbox/org/etc/Habits.org")
                                ("addressbook#contacts@group.v.calendar.google.com" . "~/Dropbox/org/etc/Birthdays.org"))))
#+END_SRC 

* org2blog 
This package allow org mode to interact with WordPress. 

#+BEGIN_SRC emacs-lisp
    (use-package org2blog
      :straight (org2blog :type git :host github :repo "org2blog/org2blog") 
      :after (org simple-secrets)
      :commands (org2blog-user-interface)
      :bind (("C-c b" . org2blog-user-interface))
      :custom
      (org-list-allow-alphabetical t)
      :config
      ;;    (setq load-path (cons "~/.emacs.d/org2blog/" load-path))
      ;; (require 'org2blog-autoloads)
      ;; blog setup
      ;; (require 'auth-source)
      (let* ((username (secret-lookup "sync0-blog-cybernetic-username"))
             (password (secret-lookup "sync0-blog-cybernetic-password"))
             (track-posts (list "org2blog.org" "Cahiers de révoltologie"))
             (config `(("cahiers"
                       :url "https://cyberneticrevolutionary.wordpress.com/xmlrpc.php"
                       :username ,username
                       :password ,password
                       :default-title "Penseé"
                       :track-posts ,track-posts
                       :tags-as-categories nil))))
        (setq org2blog/wp-blog-alist config)))
#+END_SRC

