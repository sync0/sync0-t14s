
(defvar sync0-pandoc-directory-cache
  (concat (getenv "HOME") "/Gdrive/typography/pandoc/cache/")
  "Variable where to store temp files generated by pandoc export processes") 

(defvar sync0-pandoc-export-pdf-or-tex-previous-run nil
  "Variable to know whether the defaults file was created for tex or
PDF export.")

(defvar sync0-pandoc-export-md-to-pdf-defaults-file-base
  (concat 
   "from: markdown\n"
   "to: pdf\n"
   "pdf-engine: lualatex\n")
  "Variable the common settings for all structured MD to PDF pandoc
exports. This settings appear on the programatically defined
defaults YAML file.")

(defvar sync0-pandoc-export-md-to-pdf-metadata-file-base
  (concat 
   "fontspec: true\n"
   "mainfont: 'Literata'\n"
   "mainfontoptions:\n"
   "  - Numbers=OldStyle\n"
   "  - Ligatures=TeX\n"
   "sansfont: 'Verlag'\n"
   "sansfontoptions:\n"
   "  - Ligatures=TeX\n"
   "  - Numbers=Lowercase\n"
   "  - Scale=MatchLowercase\n"
   "  - UprightFont = 'Verlag Book'\n"
   "  - BoldFont = 'Verlag Bold'\n"
   "  - ItalicFont = 'Verlag Book Italic'\n"
   "  - BoldItalicFont = 'Verlag Bold Italic'\n"
   "monofont: 'Consolas'\n"
   "monofontoptions:\n"
   "  - Scale=MatchLowercase\n"
   "microtypeoptions:\n"
   " - protrusion\n"
   " - expansion\n"
   " - tracking\n"
   "nowidow: true\n"
   "nowidowoptions:\n"
   "  - all\n"
   "hyperref: true\n"
   "hyperrefoptions:\n"
   "  - linktoc=all \n"
   "  - colorlinks\n"
   "  - urlcolor=black\n"
   "  - linkcolor=black\n"
   "  - citecolor=black\n"
   "  - filecolor=black\n"))

(defvar sync0-pandoc-export-md-to-pdf-metadata-file-bib-source
  (concat 
   "bibliography:\n"
   "  - /home/sync0/Gdrive/bibliographies/master.bib\n")
   )

(defvar sync0-pandoc-export-md-to-tex-metadata-file-bib-source
  (concat 
   "bibliography:\n"
;;    "  - /home/sync0/Gdrive/bibliographies/master.bib\n"
   "  - /home/sync0/Gdrive/bibpubs/24263gu.bib\n"))

;; (defvar sync0-pandoc-md-to-tex-command-citations
;;           (concat
;;            " --natbib"
;;            " --bibliography=/home/sync0/Gdrive/bibpubs/24263gu.bib")
;;     "String of citation export settings for pandoc to convert from markdown to latex.")

(defvar sync0-pandoc-export-md-to-pdf-metadata-file-bib-csl
  (concat 
   "csl: chicago-author-date-16th-edition-sync0.csl\n")
  "Define CSL file to use to style bibliography")

;; # csl: /home/sync0/Gdrive/typography/csl/chicago-author-date-16th-edition-sync0.csl
;; # csl: sync0.csl
;; # csl: chicago-fullnote-bibliography-fr.csl
;; # csl: chicago-fullnote-bibliography-16th-edition.csl
;; # csl: chicago-author-date-fr.csl
;; # csl: chicago-note-bibliography-16th-edition.csl
;; # csl: chicago-.csl
;; # csl: studies-in-history-and-philosophy-of-science.csl
;; # csl: history-of-political-economy.csl


(defvar sync0-pandoc-export-md-to-pdf-defaults-file-resource-path
  (concat 
   "resource-path:\n"
   ;; "  - /home/sync0/Gdrive/typography/lua_filters\n"
   "  - /home/sync0/.local/share/pandoc/filters\n"
   "  - /home/sync0/Gdrive/typography/csl\n"
   "  - /home/sync0/Gdrive/typography/pandoc\n"
   "  - /home/sync0/Gdrive/bibliographies\n"
   "  - /home/sync0/Gdrive/obsidian/img\n")
  "Variable the resource-path settings in the programatically
defined defaults YAML file.")

(defvar sync0-pandoc-export-md-to-pdf-defaults-file-include-in-header
  (concat 
   "include-in-header:\n"
   "  - /home/sync0/Gdrive/typography/pandoc/preamble.tex\n")
  "Variable the resource-path settings in the programatically
defined defaults YAML file.")

(defvar sync0-pandoc-export-md-to-pdf-defaults-file-filters
  (concat 
   "filters:\n"
   "  - /home/sync0/.local/share/pandoc/filters/noexport-subtrees.lua\n"
   "  - /home/sync0/.local/share/pandoc/filters/delink.lua\n"
   ;; "  - /home/sync0/.local/share/pandoc/filters/strip-obsidian-comments.lua\n"
   "  - /usr/bin/pandoc-crossref\n"
   "  - citeproc\n")
  "Variable the resource-path settings in the programatically
defined defaults YAML file.")

(defvar sync0-pandoc-export-md-to-pdf-defaults-file-tail
  (concat 
   "shift-heading-level-by: -1\n"
   ;;    "table-of-contents: false\n"
   )
  "Variable the settings to appear last in the programatically
defined defaults YAML file.")

(defvar sync0-pandoc-export-previous-file nil
  "Variable to store the path of the last file processed by
 structured Pandoc export.")

(defvar sync0-pandoc-default-md-to-pdf-settings
  (concat " --shift-heading-level-by=-1"
	  " --pdf-engine=lualatex"
	  " --lua-filter=/home/sync0/.local/share/pandoc/filters/noexport-subtrees.lua"
	  " --filter=/usr/bin/pandoc-crossref"
;;           " --include-in-header=/home/sync0/Gdrive/typography/pandoc/layout_scrartcl_a6.tex"
	  " --citeproc")
  "Variable to store default pandoc markdown to pdf export settings for quick call commands.")

(defvar sync0-pandoc-export-md-to-tex-settings-alist
      '(("arvore" (lambda ()
                    (concat
                     " --metadata-file=/home/sync0/Gdrive/typography/pandoc/defaults_arvore.yaml")))
        ("article" (lambda ()
                     (concat
                      " --metadata-file=/home/sync0/Gdrive/typography/pandoc/defaults_article.yaml")))
        ("scrartcl" (lambda ()
                     (concat
                      " --metadata-file=/home/sync0/Gdrive/typography/pandoc/defaults_scrartcl.yaml")))
        ("scrartcl_a5" (lambda ()
                     (concat
                      " --defaults=/home/sync0/Gdrive/typography/pandoc/defaults_scrartcl_a5.yaml")))
        ("scrartcl_a6" (lambda ()
                     (concat
                      " --defaults=/home/sync0/Gdrive/typography/pandoc/defaults_scrartcl_a6.yaml")))
        ("scrbook" (lambda ()
                     (concat
                      " --metadata-file=/home/sync0/Gdrive/typography/pandoc/defaults_scrbook.yaml")))
        ;; ("zettel (A6)" (lambda ()
        ;;              (concat
        ;;               " --metadata-file=/home/sync0/Gdrive/typography/pandoc/defaults_scrbook.yaml")))
        ("scrreprt" (lambda ()
                     (concat
                      " --metadata-file=/home/sync0/Gdrive/typography/pandoc/defaults_scrreprt.yaml"))))
      "List of concatenated strings defining the styles for markdown to pdf export")

(defvar sync0-pandoc-export-md-to-pdf-layout-file-alist
  '(("arvore" . "/home/sync0/Gdrive/typography/pandoc/layout_arvore.tex")
    ("scrartcl" . "/home/sync0/Gdrive/typography/pandoc/layout_scrartcl.tex")
;;     ("scrartcl_margin" . "/home/sync0/Gdrive/typography/pandoc/layout_scrartcl_margin.tex")
    ("scrartcl_numbered" . "/home/sync0/Gdrive/typography/pandoc/layout_scrartcl_numbered.tex")
    ("scrartcl_a5" . "/home/sync0/Gdrive/typography/pandoc/layout_scrartcl_a5.tex")
    ("scrartcl_a6" . "/home/sync0/Gdrive/typography/pandoc/layout_scrartcl_a6.tex")
;;     ("scrlttr2" . " --template scrlttr2")
    ("scrbook" . "/home/sync0/Gdrive/typography/pandoc/layout_scrbook.tex")
    ("thesis" . "/home/sync0/Gdrive/typography/pandoc/layout_thesis.tex")
    ("scrreprt" . "/home/sync0/Gdrive/typography/pandoc/layout_scrreprt.tex")
    ("zettel" . "/home/sync0/Gdrive/typography/pandoc/layout_zettel.tex")
    ("iphone_xr" . "/home/sync0/Gdrive/typography/pandoc/layout_iphone_xr.tex")
;;     ("zkn" . "/home/sync0/Gdrive/typography/pandoc/layout_zkn.tex")
    ("bibnote" . "/home/sync0/Gdrive/typography/pandoc/layout_bibnote.tex"))
  "Alist defining the styles for markdown to PDF export, mapping layout types to Pandoc layout TeX files.")

;; (defvar sync0-pandoc-export-md-to-pdf-extra-content-alist
;;   '(("arvore" . "")
;;     ("scrartcl" . "")
;;     ("scrartcl_numbered" . "")
;;     ("scrartcl_a5" . "")
;;     ("scrartcl_a6" . "")
;;     ("scrbook" . "")
;;     ("thesis" . "")
;;     ("scrreprt" . "")
;;     ("zettel" . " --lua-filter=/home/sync0/.local/share/pandoc/filters/section-clearpage.lua")
;;     ("iphone_xr" . "")
;;     ("bibnote" . " --lua-filter=/home/sync0/.local/share/pandoc/filters/section-clearpage.lua"))
;;   "Alist defining extra content for the Pandoc command for markdown to PDF export.")

(defvar sync0-pandoc-export-md-to-pdf-extra-filters-alist
  '(("arvore" . "")
    ("scrartcl" . "")
    ("scrartcl_numbered" . "")
    ("scrartcl_a5" . "")
    ("scrartcl_a6" . "")
    ("scrbook" . "")
    ("thesis" . "")
    ("scrreprt" . "")
    ("zettel" . "  - /home/sync0/.local/share/pandoc/filters/section-clearpage.lua\n")
    ("iphone_xr" . "")
    ("bibnote" . "  - /home/sync0/.local/share/pandoc/filters/section-clearpage.lua\n"))
  "Alist mapping template types to Pandoc Lua filters. The specified filters are added to the defaults file created by function sync0-pandoc-create-defaults-file.")

(defvar sync0-pandoc-md-to-pdf-preprocess-functions-alist
  '(("zettel" . (sync0-pandoc-add-or-update-subtitle))
    ("test" . (sync0-pandoc-add-brackets-to-footnote-citations
                 sync0-pandoc-add-or-update-subtitle)))
  "Alist mapping template types to lists of functions for preprocessing Markdown files.")

(defvar sync0-pandoc-export-epub-to-pdf-settings-alist
      '(("scrbook" (lambda ()
                     (concat
                      " --defaults=/home/sync0/Gdrive/typography/pandoc/defaults_epub-scrbook.yaml"))))
      "List of concatenated strings defining the styles for markdown to pdf export")


  (defvar sync0-pandoc-epub-to-pdf-command-base
    (concat
     "pandoc"
     " --from=epub --to=pdf"
     " --standalone"
     " --pdf-engine=lualatex"
     " --resource-path=.:/home/sync0/.local/share/pandoc/filters:/home/sync0/Gdrive/typography/css:/home/sync0/Gdrive/typography/csl:/home/sync0/Gdrive/typography/pandoc:/home/sync0/Gdrive/bibliographies:/home/sync0/Gdrive/typography/pandoc:/home/sync0/Gdrive/obsidian/img:/home/sync0/Pictures/archives:/home/sync0/Documents/pdfs"
     ;; " --shift-heading-level-by=1" 
     ;; " --shift-heading-level-by=-1" 
     ;; " --filter=/home/sync0/.local/share/pandoc/filters/delink.hs"
     ;; " --lua-filter=diagram-generator.lua "
     " -H preamble.tex")
     ;; " --filter pandoc-xnos"
    "String of basic export settings for pandoc to convert from markdown to pdf.")

  (defvar sync0-pandoc-md-to-tex-command-base
    (concat
     " --from=markdown --to=latex"
     " --standalone"
     " --pdf-engine=lualatex"
     " --natbib"
     " --bibliography=/home/sync0/Gdrive/bibpubs/24263gu.bib"
     " --lua-filter=noexport-subtrees.lua"
     " --lua-filter=delink.lua"
     " --shift-heading-level-by=-1")
    "String of basic export settings for pandoc to convert from markdown to pdf.")

(defvar sync0-pandoc-language-file-alist
  '(("en-US" . "/home/sync0/Gdrive/typography/pandoc/language_english.tex")
    ("fr-FR" . "/home/sync0/Gdrive/typography/pandoc/language_french.tex")
    ("es-CO" . "/home/sync0/Gdrive/typography/pandoc/language_spanish.tex")
    ("pt-BR" . "/home/sync0/Gdrive/typography/pandoc/language_portuguese.tex")
    ("it-IT" . "/home/sync0/Gdrive/typography/pandoc/language_italian.tex")
    ("de-DE" . "/home/sync0/Gdrive/typography/pandoc/language_german.tex")
    ("kr-KR" . "/home/sync0/Gdrive/typography/pandoc/language_korean.tex"))
  "Alist mapping language codes to their corresponding Pandoc include-in-header language files.")

(defvar sync0-pandoc-metadata-file-bibliography-language-alist
  '(("en-US" . "reference-section-title: References")
    ("fr-FR" . "reference-section-title: Bibliographie")
    ("es-CO" . "reference-section-title: Bibliografía")
    ("pt-BR" . "reference-section-title: Bibliografia")
    ("it-IT" . "reference-section-title: Bibliografia")
    ("de-DE" . "reference-section-title: Literaturverzeichnis")
    ;; ("de-DE" . "reference-section-title: Bibliographie")
    ("kr-KR" . "reference-section-title: 참고 문헌"))
  "Alist mapping language codes to their corresponding .")

;; (defun sync0-pandoc-sync0-pandoc-remove-obsidian-comments ()
;;   "Remove Obsidian comments from INPUT-FILE and write to OUTPUT-FILE."
;;   (save-excursion
;;     (goto-char (point-min))
;;     (while (re-search-forward "^%%.*%%$" nil t)
;;       (replace-match ""))))  ;; Remove single-line comments

(defun sync0-pandoc-remove-obsidian-comments (input-file output-file)
  "Remove single-line and multi-line Obsidian comments from INPUT-FILE and write to OUTPUT-FILE."
  (with-temp-buffer
    (insert-file-contents input-file)
    (goto-char (point-min))
    ;; Match and remove multi-line comments
    (while (re-search-forward "^%%\\(.\\|\n\\)*?%%$" nil t)
      (replace-match ""))  ;; Remove multi-line comments
    ;; Match and remove single-line comments
    (goto-char (point-min))
    (while (re-search-forward "^%%.*%%$" nil t)
      (replace-match ""))  ;; Remove single-line comments
    (write-region (point-min) (point-max) output-file)))

(defun sync0-pandoc-add-brackets-to-footnote-citations (input-file output-file)
  "Add brackets to Pandoc citations that appear directly after the footnote declaration in INPUT-FILE, and write the result to OUTPUT-FILE."
  (with-temp-buffer
    (insert-file-contents input-file)
    (goto-char (point-min))
    ;; Match footnote declarations and citations directly after
    (while (re-search-forward "^\\[\\^[[:digit:]]+\\]: *\\(@[[:digit:]]+[[:alpha:]]+\\)" nil t)
      (replace-match "[\\1]" nil nil nil 1))  ;; Add brackets around citation key
    (write-region (point-min) (point-max) output-file)))

(defun sync0-pandoc-add-or-update-subtitle (input-file output-file)
  "Add or update 'subtitle' in the YAML metadata of INPUT-FILE based on the value of 'key' and write the result to OUTPUT-FILE."
  (with-temp-buffer
    (insert-file-contents input-file)
    (goto-char (point-min))
    ;; Get the value of the 'key' property
    (let ((key-value (sync0-pandoc-get-yaml-property "key" "")))
      (when (not (string= key-value ""))
        ;; If key-value is found, add or replace the 'subtitle' property
        (if (re-search-forward "^subtitle: \\(.*\\)$" nil t)
            ;; Update existing subtitle
            (replace-match (format "subtitle: %s" key-value) nil nil)
          ;; If no existing subtitle, insert it after key-value or at the end
          (goto-char (point-min))
          (if (re-search-forward "^key: .*" nil t)
              (forward-line 1)
            (goto-char (point-min)))
          (insert (format "subtitle: %s\n" key-value))))
      ;; Write the updated content to output-file
      (write-region (point-min) (point-max) output-file))))

(defun sync0-pandoc-get-yaml-property (property default-value)
  "Search the current buffer for a YAML property and return its value, or a DEFAULT-VALUE if not found."
  (save-excursion
    (goto-char (point-min))
    (if (re-search-forward (format "^%s: \\([[:graph:]]+\\)$" property) nil t)
        (match-string-no-properties 1)
      default-value)))

;; (defun sync0-pandoc-create-defaults-file (type lang &optional texp)
;;   "Create a temporary YAML defaults and metadata files for Pandoc,
;; based on TYPE and LANG settings. When TEXP is true, recreate the
;; defaults file to suit TEX export requirements."
;;   (let* ((defaults-file (expand-file-name (concat "defaults_" type ".yaml") sync0-pandoc-directory-cache))
;;          ;; Define a metadata file name with a 'metadata_' prefix
;;          (metadata-file (expand-file-name (concat "metadata_" type ".yaml") sync0-pandoc-directory-cache))
;;          (lang-file (or (cdr (assoc lang sync0-pandoc-language-file-alist))
;;                         "/home/sync0/Gdrive/typography/pandoc/language_english.tex"))
;;          (lang-bib (or (cdr (assoc lang sync0-pandoc-metadata-file-bibliography-language-alist))
;;                         "reference-section-title: References"))
;;          (layout-file (or (cdr (assoc type sync0-pandoc-export-md-to-pdf-layout-file-alist))
;;                           "/home/sync0/Gdrive/typography/pandoc/layout_default.tex"))
;;          ;; Load the individual type-specific YAML settings from a file
;;          (type-settings-file (expand-file-name (concat type ".yaml") "/home/sync0/Gdrive/typography/pandoc/"))
;;          (type-settings-content (if (file-exists-p type-settings-file)
;;                                     (with-temp-buffer
;;                                       (insert-file-contents type-settings-file)
;;                                       (buffer-string))
;;                                   ""))
;;          ;; Combine general metadata settings with type-specific settings
;;          (metadata-content
;;           (concat
;;            sync0-pandoc-export-md-to-pdf-metadata-file-base 
;;            type-settings-content "\n"
;; 	   lang-bib "\n"
;;            sync0-pandoc-export-md-to-pdf-metadata-file-bib-source
;;            sync0-pandoc-export-md-to-pdf-metadata-file-bib-csl
;; 	   ))
;;          ;; Combine all the necessary settings into one string for the defaults file
;;          (defaults-content
;;           (concat
;;            sync0-pandoc-export-md-to-pdf-defaults-file-base
;;            sync0-pandoc-export-md-to-pdf-defaults-file-resource-path
;;            sync0-pandoc-export-md-to-pdf-defaults-file-include-in-header
;;            (concat "  - " lang-file "\n")
;;            (concat "  - " layout-file "\n")
;; 	   (concat "metadata-files:\n  - " metadata-file "\n")
;;            sync0-pandoc-export-md-to-pdf-defaults-file-filters
;;            sync0-pandoc-export-md-to-pdf-defaults-file-tail)))

;;     ;; Write the combined metadata content to the temporary metadata file
;;     (with-temp-file metadata-file
;;       (insert metadata-content))
    
;;     ;; Write the defaults content to the YAML defaults file
;;     (with-temp-file defaults-file
;;       (insert defaults-content))))

(defun sync0-pandoc-create-defaults-file (type lang &optional texp)
  "Create a temporary YAML defaults and metadata files for Pandoc,
based on TYPE and LANG settings. When TEXP is true, recreate the
defaults file to suit TEX export requirements."
  (let* ((defaults-file (expand-file-name (concat "defaults_" type ".yaml") sync0-pandoc-directory-cache))
         ;; Define a metadata file name with a 'metadata_' prefix
         (metadata-file (expand-file-name (concat "metadata_" type ".yaml") sync0-pandoc-directory-cache))
         (lang-file (or (cdr (assoc lang sync0-pandoc-language-file-alist))
                        "/home/sync0/Gdrive/typography/pandoc/language_english.tex"))
         (lang-bib (or (cdr (assoc lang sync0-pandoc-metadata-file-bibliography-language-alist))
                        "reference-section-title: References"))
         (layout-file (or (cdr (assoc type sync0-pandoc-export-md-to-pdf-layout-file-alist))
                          "/home/sync0/Gdrive/typography/pandoc/layout_default.tex"))
         ;; Load the individual type-specific YAML settings from a file
         (type-settings-file (expand-file-name (concat type ".yaml") "/home/sync0/Gdrive/typography/pandoc/"))
         (type-settings-content (if (file-exists-p type-settings-file)
                                    (with-temp-buffer
                                      (insert-file-contents type-settings-file)
                                      (buffer-string))
                                  ""))
	 (extra-filters (cdr (assoc type sync0-pandoc-export-md-to-pdf-extra-filters-alist)))
         ;; Combine general metadata settings with type-specific settings
         (metadata-content
          (concat
           sync0-pandoc-export-md-to-pdf-metadata-file-base 
           type-settings-content "\n"
	   lang-bib "\n"
	   (if texp 
	       (concat 
		sync0-pandoc-export-md-to-tex-metadata-file-bib-source
		"")
	     (concat
              sync0-pandoc-export-md-to-pdf-metadata-file-bib-source
              sync0-pandoc-export-md-to-pdf-metadata-file-bib-csl))))
         ;; Combine all the necessary settings into one string for the defaults file
         (defaults-content
          (concat
           sync0-pandoc-export-md-to-pdf-defaults-file-base
           sync0-pandoc-export-md-to-pdf-defaults-file-resource-path
           sync0-pandoc-export-md-to-pdf-defaults-file-include-in-header
           (concat "  - " lang-file "\n")
           (concat "  - " layout-file "\n")
	   (concat "metadata-files:\n  - " metadata-file "\n")
	   (concat sync0-pandoc-export-md-to-pdf-defaults-file-filters extra-filters)
           sync0-pandoc-export-md-to-pdf-defaults-file-tail)))

    ;; Write the combined metadata content to the temporary metadata file
    (with-temp-file metadata-file
      (insert metadata-content))
    
    ;; Write the defaults content to the YAML defaults file
    (with-temp-file defaults-file
      (insert defaults-content))))

(defun sync0-pandoc-md-to-pdf-preprocess-on-type (type input-file)
  "Preprocess the INPUT-FILE based on the export template TYPE.
Return the path to the processed file. If no functions are defined for TYPE,
return INPUT-FILE directly."
  (let ((output-file input-file)
        (functions (cdr (assoc type sync0-pandoc-md-to-pdf-preprocess-functions-alist))))
    (dolist (func functions)
      ;; Create a temporary output file to store intermediate results
      (let ((temp-output (make-temp-file "temp-md-")))
        (funcall func output-file temp-output)
        ;; Update the output file to the temp output for the next iteration
        (setq output-file temp-output)))
    output-file))  ;; Return the final processed file path

(defun sync0-pandoc-export-md-to-pdf ()
  "Run structured or unstructured Pandoc based on the YAML export_template property."
  (interactive)
  (let* ((current-file (buffer-file-name))
         (previous-file sync0-pandoc-export-previous-file)
         (temp-file (make-temp-file "temp-md-"))
         (file (if (string= current-file previous-file)
                   sync0-pandoc-export-previous-file
                 (if (and current-file (string-match "\\.md\\'" current-file))
                     (if (y-or-n-p (format "Run Pandoc on the current buffer file: %s? " current-file))
                         current-file
                       (read-file-name "Choose a markdown file: " nil nil t))
                   (read-file-name "Choose a markdown file: " nil nil t)))))
    ;; Preprocess the markdown file
    (sync0-pandoc-remove-obsidian-comments file temp-file)
    (sync0-pandoc-add-brackets-to-footnote-citations temp-file temp-file)

    ;; Check for YAML property in the chosen file
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (if (re-search-forward "^export_template: \\([[:graph:]]+\\)$" nil t)
          (let* ((type (match-string-no-properties 1))
		 ;; Edit the md temp file based on type-based commands to run
		 (md-file (sync0-pandoc-md-to-pdf-preprocess-on-type type temp-file))
		 (lang (sync0-pandoc-get-yaml-property "lang" "en-US"))
                 (yaml-cache-dir (expand-file-name sync0-pandoc-directory-cache))
                 (defaults-file (concat yaml-cache-dir "defaults_" type ".yaml"))
               ;; (extra-content (cdr (assoc type sync0-pandoc-export-md-to-pdf-extra-content-alist)))
		 (recalc-files (or (string= sync0-pandoc-export-pdf-or-tex-previous-run "tex")
				   (when (file-exists-p defaults-file)
				     (yes-or-no-p "Recalc template files? ")))))
            ;; Check if YAML file exists in cache; if not, create it
            (when recalc-files
              (sync0-pandoc-create-defaults-file type lang)
              (setq sync0-pandoc-export-pdf-or-tex-previous-run "pdf"))

            ;; Run structured Pandoc process using the cached YAML file
            (let* ((raw-command (concat "pandoc --defaults=" defaults-file))
                   (command (concat raw-command " " md-file " -o " (file-name-sans-extension file) ".pdf")))
              (async-shell-command command)
              (setq sync0-pandoc-export-previous-file file)
              (message "Structured Pandoc export executed on %s" file)))
        ;; Run unstructured Pandoc process
        (let ((command (format "pandoc %s -o %s.pdf %s"
                               temp-file (file-name-sans-extension file) sync0-pandoc-default-md-to-pdf-settings)))
          (shell-command command)
          (setq sync0-pandoc-export-previous-file file)
          (message "Pandoc command executed on %s" file))))))

(defun sync0-pandoc-export-md-to-tex ()
  "Convert Markdown to TeX using Pandoc, based on the YAML export_template property."
  (interactive)
  (let* ((current-file (buffer-file-name))
         (temp-file (make-temp-file "temp-md-"))
         (previous-file sync0-pandoc-export-previous-file)
         (file (if (string= current-file previous-file)
                   sync0-pandoc-export-previous-file
                 (if (and current-file (string-match "\\.md\\'" current-file))
                     (if (y-or-n-p (format "Convert the current buffer file: %s to TeX? " current-file))
                         current-file
                       (read-file-name "Choose a markdown file: " nil nil t))
                   (read-file-name "Choose a markdown file: " nil nil t)))))
    ;; Preprocess the markdown file
    (sync0-pandoc-remove-obsidian-comments file temp-file)
    (sync0-pandoc-add-brackets-to-footnote-citations temp-file temp-file)

    ;; Check for YAML property in the chosen file
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
;;       (if (re-search-forward "^export_template: \\([[:graph:]]+\\)$" nil t)
;;           (let* ((type (match-string-no-properties 1))
;;                  (lang (sync0-pandoc-get-yaml-property "lang" "en-US"))
;;                  (yaml-cache-dir (expand-file-name sync0-pandoc-directory-cache))
;;                  (defaults-file (concat yaml-cache-dir "defaults_" type ".yaml"))
;; 		 (recalc-files (or (string= sync0-pandoc-export-pdf-or-tex-previous-run "pdf")
;; 				   (when (file-exists-p defaults-file)
;; 				     (yes-or-no-p "Recalc template files? ")))))
;;             ;; Check if YAML file exists in cache; if not, create it
;;             (when  recalc-files
;;               (sync0-pandoc-create-defaults-file type lang t)
;;               (setq sync0-pandoc-export-pdf-or-tex-previous-run "tex"))

;;             ;; Run structured Pandoc process using the cached YAML file
;;             (let* ((raw-command (concat "pandoc --defaults=" defaults-file))
;;                    (command (concat raw-command " --natbib " temp-file " -o " (file-name-sans-extension file) ".tex")))
;;               (async-shell-command command)
;;               (setq sync0-pandoc-export-previous-file file)
;;               (message "Structured Pandoc export executed on %s" file)))
        ;; Run unstructured Pandoc process
        (let ((command (format "pandoc %s %s -o %s.tex"
                             sync0-pandoc-md-to-tex-command-base temp-file (file-name-sans-extension file))))
          (shell-command command)
          (setq sync0-pandoc-export-previous-file file)
          (message "Pandoc command executed on %s" file)))))

(setq sync0-pandoc-md-to-docx-command
      (concat
       "pandoc"
       " --from=markdown --to=docx"
       " --standalone"
       " --resource-path=.:/home/sync0/.local/share/pandoc/filters:/home/sync0/Gdrive/typography/css:/home/sync0/Gdrive/typography/csl:/home/sync0/Gdrive/pandoc/yaml:/home/sync0/Gdrive/pandoc/templates:/home/sync0/Gdrive/bibliographies"
       " --shift-heading-level-by=-1" 
       " --bibliography=/home/sync0/Gdrive/bibliographies/master.bib"
;;        " --bibliography=/home/sync0/Gdrive/bibpubs/24263gu.bib"
       ;; " --csl=/home/sync0/Gdrive/typography/csl/chicago-fullnote-short-title-sync0-nodoi.csl"
       ;; " --csl=/home/sync0/Gdrive/typography/csl/chicago-author-date-fr.csl"
       ;; " --csl=/home/sync0/Gdrive/typography/csl/test.csl"
       ;; " --csl=/home/sync0/Gdrive/typography/csl/chicago-fullnote-bibliography-with-ibid-sync0.csl" 
       ;; " --csl=/home/sync0/Gdrive/typography/csl/revue-histoire-pensee-economique.csl"
       ;; " --csl=/home/sync0/Gdrive/typography/csl/revue-histoire-pensee-economique.csl"
       ;; " --csl=/home/sync0/Gdrive/typography/csl/revue-histoire-pensee-economique.csl"
       " --reference-doc=/home/sync0/Gdrive/typography/pandoc/conference_template.docx"
       ;; " --reference-doc=/home/sync0/Gdrive/typography/pandoc/pandoc_template.docx"
       " --lua-filter=noexport-subtrees.lua"
       " --lua-filter=delink.lua"
       " --metadata=reference-section-title:References"
       " --citeproc"
       ;; " --filter=/home/sync0/.local/share/pandoc/filters/delink.hs"
       ))

;; (defun sync0-pandoc-export-md-to-docx ()
;;   (interactive)
;;   (let* ((current-path (buffer-file-name))
;;          (current-file (when (string-match "^.+/\\([[:alnum:]]+\\)\\.md$" current-path)
;;                          (match-string-no-properties 1 current-path)))
;;          ;; (current-file (when (string-match "^.+/\\([0-9]+\\)\\.md$" current-path)
;;         ;;                 (match-string-no-properties 1 current-path)))
;;          (file (read-string "Which file to convert to docx? " current-file))
;;          (command (concat sync0-pandoc-md-to-docx-command " " file ".md -o" file ".docx")))
;;     (shell-command command)))

(defun sync0-pandoc-export-md-to-docx ()
  "Convert a Markdown file to DOCX using Pandoc. 
   Handles both structured (with YAML export_template) and unstructured exports."
  (interactive)
  (let* ((current-file (buffer-file-name))
         (previous-file sync0-pandoc-export-previous-file)
         (temp-file (make-temp-file "temp-md-"))
         (file (if (string= current-file previous-file)
                   sync0-pandoc-export-previous-file
                 (if (and current-file (string-match "\\.md\\'" current-file))
                     (if (y-or-n-p (format "Run Pandoc on the current buffer file: %s? " current-file))
                         current-file
                       (read-file-name "Choose a markdown file: " nil nil t))
                   (read-file-name "Choose a markdown file: " nil nil t)))))
    ;; Preprocess the markdown file
    (sync0-pandoc-remove-obsidian-comments file temp-file)
    (sync0-pandoc-add-brackets-to-footnote-citations temp-file temp-file)

    ;; Check for YAML property in the chosen file
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
;;    beginning of if block
;; 	  (re-search-forward "^export_template: \\([[:graph:]]+\\)$" nil t)
;;           (let* ((type (match-string-no-properties 1))
;; 		 (lang (sync0-pandoc-get-yaml-property "lang" "en-US"))
;;                  (yaml-cache-dir (expand-file-name sync0-pandoc-directory-cache))
;;                  (defaults-file (concat yaml-cache-dir "defaults_" type ".yaml"))
;; 		 (recalc-files (or (string= sync0-pandoc-export-docx-or-tex-previous-run "tex")
;; 				   (when (file-exists-p defaults-file)
;; 				     (yes-or-no-p "Recalc template files? ")))))
;;             ;; Check if YAML file exists in cache; if not, create it
;;             (when recalc-files
;;               (sync0-pandoc-create-defaults-file type lang)
;;               (setq sync0-pandoc-export-docx-or-tex-previous-run "docx"))

;;             ;; Run structured Pandoc process using the cached YAML file
;;             (let* ((raw-command (concat "pandoc --defaults=" defaults-file))
;;                    (command (concat raw-command " " temp-file " -o " (file-name-sans-extension file) ".docx")))
;;               (async-shell-command command)
;;               (setq sync0-pandoc-export-previous-file file)
;;               (message "Structured Pandoc DOCX export executed on %s" file)))
        ;; Run unstructured Pandoc process
;;         ((command (format "pandoc %s -o %s.docx %s"
;;                                temp-file (file-name-sans-extension file) sync0-pandoc-default-md-to-docx-settings)))
        (let ((command (format "%s %s -o %s.docx"
                             sync0-pandoc-md-to-docx-command temp-file (file-name-sans-extension file))))
          (shell-command command)
          (setq sync0-pandoc-export-previous-file file)
          (message "Pandoc DOCX command executed on %s" file)))))


  (defvar sync0-pandoc-docx-to-pdf-command-base
    (concat
     "pandoc"
     " --from=docx --to=pdf"
     " --standalone"
     " --pdf-engine=lualatex"
     " --resource-path=.:/home/sync0/.local/share/pandoc/filters:/home/sync0/Gdrive/typography/css:/home/sync0/Gdrive/typography/csl:/home/sync0/Gdrive/typography/pandoc:/home/sync0/Gdrive/bibliographies:/home/sync0/Gdrive/typography/pandoc:/home/sync0/Gdrive/obsidian/img:/home/sync0/Pictures/archives:/home/sync0/Documents/pdfs"
     ;; " --shift-heading-level-by=1" 
     ;; " --shift-heading-level-by=-1" 
     ;; " --filter=/home/sync0/.local/share/pandoc/filters/delink.hs"
     ;; " --lua-filter=noexport-subtrees.lua"
     ;; " --lua-filter=diagram-generator.lua "
     "--track-changes=all"
     " -H preamble.tex")
     ;; " --filter pandoc-xnos"
    "String of basic export settings for pandoc to convert from markdown to pdf.")

(defun sync0-pandoc-export-docx-to-pdf (&optional myfile)
  (interactive)
  (let* ((file (or myfile
                   (read-string "Which file to convert to docx? ")))
         (command (concat sync0-pandoc-docx-to-pdf-command-base " " file ".docx -o" file ".pdf")))
    (shell-command command)))

  (defvar sync0-pandoc-docx-to-md-command-base
    (concat
     "pandoc"
     " --from=docx --to=markdown"
     " --standalone"
     " --resource-path=.:/home/sync0/.local/share/pandoc/filters:/home/sync0/Gdrive/typography/css:/home/sync0/Gdrive/typography/csl:/home/sync0/Gdrive/typography/pandoc:/home/sync0/Gdrive/bibliographies:/home/sync0/Gdrive/typography/pandoc:/home/sync0/Gdrive/obsidian/img:/home/sync0/Pictures/archives:/home/sync0/Documents/pdfs"
     " --shift-heading-level-by=-1" 
     ;; " --filter=/home/sync0/.local/share/pandoc/filters/delink.hs"
     " --lua-filter=noexport-subtrees.lua"
     " --lua-filter=delink.lua"
     " --lua-filter=criticmarkup.lua"
     " --track-changes=all")
    "String of basic export settings for pandoc to convert from markdown to pdf.")

(defun sync0-pandoc-export-docx-to-md (&optional myfile)
  (interactive)
  (let* ((file (or myfile
                   (read-string "Which file to convert to docx? ")))
         (command (concat sync0-pandoc-docx-to-md-command-base " " file ".docx -o" file ".md")))
    (shell-command command)))

(provide 'sync0-pandoc)
